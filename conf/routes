# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~
GET         /                                                         controllers.SmApplication.smIndex
GET         /deviceIndex/:device                                      controllers.SmApplication.deviceIndex(device)
GET         /debugQry/:device                                         controllers.SmApplication.debugQry(device)

+ nocsrf
POST        /deviceTree/:device                                       controllers.SmApplication.deviceTree(device)


POST        /importDevice                                             controllers.SmSyncDeviceStream.importDevice


GET         /deviceImport                                             controllers.SmSyncDeviceStream.deviceImport

+ nocsrf
POST        /syncDeviceStream/:device                                 controllers.SmSyncDeviceStream.syncDevice(device: String)

+ nocsrf
POST        /syncs-single-name-path-stream                            controllers.SmSyncDeviceStream.syncSingleNamePath(path2scan: String, deviceUid: String)


+ nocsrf
POST        /syncDeviceStream/deleteNonExistsFpathInDb/:device        controllers.SmSyncDeviceStream.deleteNonExistsFpathInDb(device: String)


+ nocsrf
POST        /calcCRC/:device                                          controllers.SmFcCrc.calcCRC(device: String)

+ nocsrf
POST        /calc-all-crc                                             controllers.SmFcCrc.calcAllCRC()


GET         /sync-compare-directory/children/:device                  controllers.SmSyncCmpDir.getChildren(device: String, id:String)



+ nocsrf
POST        /calcExif/:device                                         controllers.SmSyncExif.calcExif(device:String)
GET         /exif/:fileName                                           controllers.SmSyncExif.getExif(fileName:String)
GET         /gps-all                                                  controllers.SmSyncExif.viewAllGps
GET         /get-dirs-diff-modify-date                                controllers.SmSyncExif.getDirsDiffModifyDate
GET         /get-files-diff-modify-date-by-parent                     controllers.SmSyncExif.vFilesDiffModifyDateByParent(fParent: String)
POST        /set-modify-date-files-by-parent                          controllers.SmSyncExif.setDiffModifyDateFilesByParent(fParent: String)

+ nocsrf
POST        /resize-image/:device                                     controllers.SmImage.resizeImage(device:String)

GET         /view-images                                              controllers.SmImage.viewImages(deviceUid: String, fParent: String)
GET         /view-image                                               controllers.SmImage.viewImage(fullPath: String, mimeType: Option[String])

GET         /fc/byDevice/:device                                      controllers.SmApplication.getByDevice(device: String)
GET         /fc/getByDeviceByLastModifDate/:device                    controllers.SmApplication.getByDeviceByLastModifDate(device: String)
GET         /fc/listStoreNameAndCnt                                   controllers.SmApplication.listStoreNameAndCnt

GET         /listFilesWithoutSha256ByDevice/:device                   controllers.SmReport.listFilesWithoutSha256ByDevice(device: String)
GET         /checkBackUp/:device                                      controllers.SmReport.checkBackUp(device: String)
GET         /checkBackAllFiles                                        controllers.SmReport.checkBackAllFiles
GET         /checkBackFilesLastYear                                   controllers.SmReport.checkBackFilesLastYear
GET         /checkDuplicates/:device                                  controllers.SmReport.checkDuplicates(device: String)
POST        /checkDuplicatesByParent                                  controllers.SmReport.checkDuplicatesByParent(device: String, fParent: String)
GET         /getFcByDeviceSha256/:device/:sha256                      controllers.SmReport.getFcByDeviceSha256(device: String, sha256: String)
GET         /lstDirByDevice/:device/:maxFiles                         controllers.SmReport.lstDirByDevice(device: String, maxFiles: Int)
GET         /cmpBackupAndroindDeviceByFile/:fileName                  controllers.SmReport.cmpBackupAndroidDeviceByFile(fileName:String)


GET         /listCategoryTypeAndCnt                                   controllers.SmCategoryView.listCategoryTypeAndCnt
GET         /listCategoryAndCnt                                       controllers.SmCategoryView.listCategoryAndCnt(categoryType: String)
GET         /listSubCategoryAndCnt                                    controllers.SmCategoryView.listSubCategoryAndCnt(categoryType: String, category: String)


GET         /listPathByCategory                                       controllers.SmMove.listPathByCategory(categoryType: String, category: String, subCategory: String)
GET         /listAllPathsByLstCrc                                     controllers.SmMove.listAllPathsByLstCrc(fParent: String)

+ nocsrf
POST        /createJobToMove                                          controllers.SmMove.createJobToMove(categoryType: String, category: String, subCategory: String, device: String, oldPath: String)
+ nocsrf
POST        /delJobToMove                                             controllers.SmMove.delJobToMove(categoryType: String, category: String, subCategory: String, device: String, path: String)

+ nocsrf
POST        /moveAllDevices                                           controllers.SmMove.moveAllDevices


GET         /listDirWithoutCatByLastDate                              controllers.SmCategoryView.listDirWithoutCatByLastDate()
GET         /listFcWithoutCatByLastDate                               controllers.SmCategoryView.listFcWithoutCatByLastDate()
POST        /listDirWithoutCategoryByExtension                        controllers.SmCategoryView.listDirWithoutCategoryByExtension()
GET         /listDirWithoutCatByParent/:isBegins/:path                controllers.SmCategory.listDirWithoutCatByParent(path: String, isBegins: Boolean)
+ nocsrf
POST        /setCategoryAndDescription/:isBegins/:fParent             controllers.SmCategory.assignCategoryAndDescription(fParent: String, isBegins: Boolean)

+ nocsrf
POST        /convertDeviceIdBatch                                     controllers.SmMigrateDb.convertDeviceIdBatch(device)

+ nocsrf
POST        /apply-rules-set-cathegory                                controllers.SmCategory.applyRulesSetCategory()



GET         /delete-files                                             controllers.SmDeduplicate.deleteFilesIfExist(device: String, fParent:String)


#view-file
GET         /view-storage                                             controllers.SmView.viewStorage(device: String)
GET         /explorerDevice                                           controllers.SmView.explorerDevice(device: String, treePath:String, path: String, depth: Int)
GET         /view-file                                                controllers.SmView.viewFile(sha256: Option[String])
#GET         /view-file-by-natural-key                                 controllers.SmView.viewFileByNaturalKey(deviceUid: String, path: String, fName: String)

GET         /viewPathBySha256                                         controllers.SmView.viewPathBySha256(sha256: String)

#search
GET         /search-form                                              controllers.SmSearch.queryForm
GET         /get-files-by-file-name                                   controllers.SmSearch.getFilesbyName(draw: Int, start:Int, length:Int)

GET         /exif-devices                                             controllers.browser.SmExifDevice.listExifDevices
GET         /exif-files-by-device                                     controllers.browser.SmExifDevice.listFilesByExifDevice(exifMake: String, exifDevice: String)

GET         /assets/*file                                             controllers.Assets.versioned(path="/public", file: Asset)
